# Generated by Django 4.2.7 on 2025-10-14 14:53

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('proyectos', '0013_tipologiavivienda_metros_cuadrados_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FichaPostventa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_creacion', models.DateField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_evaluacion', models.DateField(default=datetime.date.today, verbose_name='Fecha de evaluación')),
                ('familia_presente', models.BooleanField(default=True, verbose_name='¿Familia presente durante evaluación?')),
                ('jefe_hogar_presente', models.BooleanField(default=False, verbose_name='¿Jefe de hogar presente?')),
                ('observaciones_familia', models.TextField(blank=True, help_text='Comentarios sobre la presencia y participación de la familia', verbose_name='Observaciones sobre la familia')),
                ('agua_potable_funciona', models.BooleanField(default=True, verbose_name='¿Agua potable funcionando correctamente?')),
                ('electricidad_funciona', models.BooleanField(default=True, verbose_name='¿Electricidad funcionando correctamente?')),
                ('alcantarillado_funciona', models.BooleanField(default=True, verbose_name='¿Alcantarillado funcionando correctamente?')),
                ('gas_funciona', models.BooleanField(default=True, verbose_name='¿Gas funcionando correctamente?')),
                ('estado_general_vivienda', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado general de la vivienda')),
                ('estado_techumbre', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado de la techumbre')),
                ('estado_muros', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado de los muros')),
                ('estado_pisos', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado de los pisos')),
                ('estado_puertas_ventanas', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado de puertas y ventanas')),
                ('estado_instalacion_electrica', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado instalación eléctrica')),
                ('estado_instalacion_sanitaria', models.IntegerField(choices=[(1, 'Muy malo'), (2, 'Malo'), (3, 'Regular'), (4, 'Bueno'), (5, 'Muy bueno')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Estado instalación sanitaria')),
                ('satisfaccion_general', models.IntegerField(choices=[(1, 'Muy insatisfecho'), (2, 'Insatisfecho'), (3, 'Neutral'), (4, 'Satisfecho'), (5, 'Muy satisfecho')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfacción general con la vivienda')),
                ('satisfaccion_tamano', models.IntegerField(choices=[(1, 'Muy insatisfecho'), (2, 'Insatisfecho'), (3, 'Neutral'), (4, 'Satisfecho'), (5, 'Muy satisfecho')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfacción con el tamaño')),
                ('satisfaccion_distribucion', models.IntegerField(choices=[(1, 'Muy insatisfecho'), (2, 'Insatisfecho'), (3, 'Neutral'), (4, 'Satisfecho'), (5, 'Muy satisfecho')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfacción con la distribución')),
                ('satisfaccion_ubicacion', models.IntegerField(choices=[(1, 'Muy insatisfecho'), (2, 'Insatisfecho'), (3, 'Neutral'), (4, 'Satisfecho'), (5, 'Muy satisfecho')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Satisfacción con la ubicación')),
                ('requiere_reparaciones', models.BooleanField(default=False, verbose_name='¿Requiere reparaciones?')),
                ('detalle_reparaciones', models.TextField(blank=True, verbose_name='Detalle de reparaciones necesarias')),
                ('requiere_mejoras', models.BooleanField(default=False, verbose_name='¿Requiere mejoras?')),
                ('detalle_mejoras', models.TextField(blank=True, verbose_name='Detalle de mejoras sugeridas')),
                ('adaptacion_familiar', models.IntegerField(choices=[(1, 'Muy difícil'), (2, 'Difícil'), (3, 'Regular'), (4, 'Buena'), (5, 'Muy buena')], default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Nivel de adaptación familiar')),
                ('integracion_comunitaria', models.IntegerField(choices=[(1, 'Muy difícil'), (2, 'Difícil'), (3, 'Regular'), (4, 'Buena'), (5, 'Muy buena')], default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Nivel de integración comunitaria')),
                ('conoce_vecinos', models.BooleanField(default=False, verbose_name='¿Conoce a sus vecinos?')),
                ('participa_organizaciones', models.BooleanField(default=False, verbose_name='¿Participa en organizaciones comunitarias?')),
                ('acceso_salud', models.IntegerField(choices=[(1, 'Muy difícil'), (2, 'Difícil'), (3, 'Regular'), (4, 'Fácil'), (5, 'Muy fácil')], default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Acceso a servicios de salud')),
                ('acceso_educacion', models.IntegerField(choices=[(1, 'Muy difícil'), (2, 'Difícil'), (3, 'Regular'), (4, 'Fácil'), (5, 'Muy fácil')], default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Acceso a educación')),
                ('acceso_transporte', models.IntegerField(choices=[(1, 'Muy difícil'), (2, 'Difícil'), (3, 'Regular'), (4, 'Fácil'), (5, 'Muy fácil')], default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Acceso a transporte público')),
                ('acceso_comercio', models.IntegerField(choices=[(1, 'Muy difícil'), (2, 'Difícil'), (3, 'Regular'), (4, 'Fácil'), (5, 'Muy fácil')], default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Acceso a comercio básico')),
                ('observaciones_tecnicas', models.TextField(blank=True, help_text='Comentarios técnicos sobre el estado de la vivienda', verbose_name='Observaciones técnicas')),
                ('observaciones_sociales', models.TextField(blank=True, help_text='Comentarios sobre aspectos sociales y de adaptación', verbose_name='Observaciones sociales')),
                ('recomendaciones', models.TextField(blank=True, help_text='Recomendaciones para mejorar la calidad de vida', verbose_name='Recomendaciones')),
                ('requiere_seguimiento', models.BooleanField(default=False, verbose_name='¿Requiere seguimiento adicional?')),
                ('fecha_proximo_seguimiento', models.DateField(blank=True, null=True, verbose_name='Fecha próximo seguimiento')),
                ('activa', models.BooleanField(default=True, verbose_name='Ficha activa')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('actualizada_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fichas_actualizadas', to=settings.AUTH_USER_MODEL, verbose_name='Actualizada por')),
                ('evaluador', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fichas_evaluadas', to=settings.AUTH_USER_MODEL, verbose_name='Evaluador')),
                ('vivienda', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ficha_postventa', to='proyectos.vivienda', verbose_name='Vivienda')),
            ],
            options={
                'verbose_name': 'Ficha de Postventa',
                'verbose_name_plural': 'Fichas de Postventa',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='HistorialFicha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_cambio', models.DateTimeField(auto_now_add=True)),
                ('campo_modificado', models.CharField(max_length=100, verbose_name='Campo modificado')),
                ('valor_anterior', models.TextField(blank=True, verbose_name='Valor anterior')),
                ('valor_nuevo', models.TextField(blank=True, verbose_name='Valor nuevo')),
                ('observaciones', models.TextField(blank=True, verbose_name='Observaciones del cambio')),
                ('ficha', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historial', to='ficha_postventa.fichapostventa')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historial de Ficha',
                'verbose_name_plural': 'Historial de Fichas',
                'ordering': ['-fecha_cambio'],
            },
        ),
        migrations.CreateModel(
            name='ArchivoFicha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('foto_general', 'Foto General'), ('foto_problema', 'Foto de Problema'), ('documento', 'Documento'), ('plano', 'Plano'), ('otro', 'Otro')], default='foto_general', max_length=20, verbose_name='Tipo de archivo')),
                ('archivo', models.FileField(upload_to='fichas_postventa/%Y/%m/', verbose_name='Archivo')),
                ('descripcion', models.CharField(blank=True, max_length=200, verbose_name='Descripción')),
                ('fecha_subida', models.DateTimeField(auto_now_add=True)),
                ('ficha', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archivos', to='ficha_postventa.fichapostventa')),
                ('subido_por', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Archivo de Ficha',
                'verbose_name_plural': 'Archivos de Fichas',
                'ordering': ['-fecha_subida'],
            },
        ),
        migrations.AddIndex(
            model_name='fichapostventa',
            index=models.Index(fields=['vivienda'], name='ficha_postv_viviend_92bb29_idx'),
        ),
        migrations.AddIndex(
            model_name='fichapostventa',
            index=models.Index(fields=['fecha_evaluacion'], name='ficha_postv_fecha_e_84b997_idx'),
        ),
        migrations.AddIndex(
            model_name='fichapostventa',
            index=models.Index(fields=['evaluador'], name='ficha_postv_evaluad_a09289_idx'),
        ),
        migrations.AddIndex(
            model_name='fichapostventa',
            index=models.Index(fields=['requiere_seguimiento'], name='ficha_postv_requier_f9b635_idx'),
        ),
    ]
